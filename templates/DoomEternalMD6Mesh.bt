//--- 010 Editor v11.0.1 Binary Template
//
//   File: DoomEternalMD6Mesh.bt
//   Author: SamPT
//   Version: 0.1
//   Purpose: For reading DOOM Eternal .md6mesh files.
//   Date: August 25, 2021
//------------------

LittleEndian();
local int i;		
struct MD6MESH;
struct HEADER;
struct BONES;
struct MESHES;
struct MESH;
struct MESH_LIST;
struct UNKNOWN_CHUNK;
struct UNKNOWN_244;
struct STREAMDB_DATA;
struct FOOTER;

typedef struct {
	
	HEADER header <name="File Header">;
	BONES bones <name="Bones">;
	MESHES meshes <name="Meshes">;
	
	local int64 fileSize = FileSize();
	FSeek(fileSize-32);
	FOOTER footer <name="Footer">;
	
	local int32 numFiles = footer.numFilesInStreamDB;
	local int32 startPos = (fileSize - (numFiles * 16)) - 32;
	FSeek(startPos);

	for (i = 0; i < numFiles; i++) {
		STREAMDB_DATA streamdb_data <name="StreamDB Data">;
	}	
	
	FSeek(startPos-244);
	UNKNOWN_244 unknown_244 <name="Unknown 244 byte section">;
	
} MD6MESH;

typedef struct {
	
	uint32 md6skl_Strlen;
	char   md6skl_File[md6skl_Strlen];
	
	// after the filename is 24 unknown bytes, often repeating in groups of 4
	float unkFloat1;
	float unkFloat2;
	float unkFloat3;
	float unkFloat4;
	float unkFloat5;
	float unkFloat6;
	char	unkAlways1;
	uint32 _nullbytes;
	
} HEADER;

typedef struct {
	
	uint16 numBones;
	for (i = 0; i < numBones; i++)
	{
		uchar boneNumber;
	}
	
	float unkBoneFloat1;
	float unkBoneFloat2;
	float unkBoneFloat3;
	float unkBoneFloat4;
	float unkBoneFloat5;
	float unkBoneFloat6;
	uint64 unkAlways5;
	
	// if these are zero, then texture/mesh section is shorter.
	float unkBoneFloat7;
	float unkBoneFloat8;

	uchar unkAlwaysNull[48];
	
} BONES;

typedef struct {
	
	uint32 numMeshes;
	for (i = 0; i < numMeshes; i++) {
		MESH mesh;
	}
	
	uint32 numMeshesList;
	for (i = 0; i < numMeshesList; i++)	{
		MESH_LIST mesh_list;
	}
	
	uint64 _nullbytes64;
	
} MESHES;

typedef struct {
	
	uint32 meshName_Strlen;
	char   meshName[meshName_Strlen];
	uint32 textureName_Strlen;
	char   textureName[textureName_Strlen];
	
	if (bones.unkBoneFloat7 == 0) {
		uchar unkMeshData[118];
	} else {
		uchar unkMeshData[262];	
	}
	
} MESH;

typedef struct {
	
	uint32 meshName_Strlen;
	char   meshName[meshName_Strlen];
	uint64 meshNumber;
	uchar  unkMeshValue1;
	uchar  unkMeshValue2;
	uint16 _nullbytes16;
	
} MESH_LIST;

typedef struct {

	uint16 unkAlways60;
	uint16 unkAlways2;
	uint32 modelDecompressedSize_LOD_HIGH;
	uint32 unkAlways4;
	uint32 unkAlways32;
	uint32 unkAlways20;
	uchar  unknown28_A[28];		
	
} UNKNOWN_CHUNK;

typedef struct {
	
	uint32 numUnknowns;
	for (i = 0; i < numUnknowns; i++) {
		UNKNOWN_CHUNK unknown_chunk;
	}

} UNKNOWN_244;

typedef struct {

	uint32 numFilesInStreamDB;
	uint64 _nullbytes;
	uint32 cumulativeStreamDBSize;
	uint32 numFilesInStreamDB;
	uint64 _nullbytes;
	uint32 cumulativeStreamDBSize;
	
} FOOTER;

typedef struct {
	
	uint32 Unk1;
	uint32 decompressedSize;
	uint32 compressedSize;
	uint32 cumulativeCompressedSize;
	
} STREAMDB_DATA;

MD6MESH md6mesh <name="DOOM Eternal .md6mesh File">;